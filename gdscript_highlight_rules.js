/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from .\GDScript.tmLanguage.json (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
  "use strict";

  var oop = require("../lib/oop");
  var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

  var GDScriptHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
      start: [
        {
          include: "#base_expression"
        },
        {
          include: "#logic_op"
        },
        {
          include: "#compare_op"
        },
        {
          include: "#arithmetic_op"
        },
        {
          include: "#assignment_op"
        },
        {
          include: "#keywords"
        },
        {
          include: "#self"
        },
        {
          include: "#const_def"
        },
        {
          include: "#type_declear"
        },
        {
          include: "#class_def"
        },
        {
          include: "#class_name"
        },
        {
          include: "#builtin_func"
        },
        {
          include: "#builtin_classes"
        },
        {
          include: "#const_vars"
        },
        {
          include: "#class_new"
        },
        {
          include: "#class_is"
        },
        {
          include: "#class_enum"
        },
        {
          include: "#function-declaration"
        },
        {
          include: "#function-return-type"
        },
        {
          include: "#any-method"
        },
        {
          include: "#any-property"
        },
        {
          include: "#extends"
        },
        {
          include: "#pascal_case_class"
        }
      ],
      "#comment": [
        {
          token: [
            "punctuation.definition.comment.number-sign.gdscript",
            "comment.line.number-sign.gdscript"
          ],
          regex: /(#)(.*$)/
        }
      ],
      "#strings": [
        {
          token: "string.quoted.double.gdscript",
          regex: /"/,
          push: [
            {
              token: "string.quoted.double.gdscript",
              regex: /"/,
              next: "pop"
            },
            {
              token: "constant.character.escape.untitled",
              regex: /\./
            },
            {
              defaultToken: "string.quoted.double.gdscript"
            }
          ]
        },
        {
          token: "string.quoted.single.gdscript",
          regex: /'/,
          push: [
            {
              token: "string.quoted.single.gdscript",
              regex: /'/,
              next: "pop"
            },
            {
              token: "constant.character.escape.untitled",
              regex: /\./
            },
            {
              defaultToken: "string.quoted.single.gdscript"
            }
          ]
        },
        {
          token: "string.nodepath.gdscript",
          regex: /@"/,
          push: [
            {
              token: "string.nodepath.gdscript",
              regex: /"/,
              next: "pop"
            },
            {
              token: "constant.character.escape.untitled",
              regex: /\./
            },
            {
              defaultToken: "string.nodepath.gdscript"
            }
          ]
        }
      ],
      "#self": [
        {
          token: "variable.language.gdscript",
          regex: /\bself\b/
        }
      ],
      "#base_expression": [
        {
          include: "#strings"
        },
        {
          include: "#comment"
        },
        {
          include: "#letter"
        },
        {
          include: "#numbers"
        },
        {
          include: "#line-continuation"
        }
      ],
      "#logic_op": [
        {
          token: "keyword.operator.logical.gdscript",
          regex: /\b(?:and|or|not)\b/
        }
      ],
      "#compare_op": [
        {
          token: "keyword.operator.comparison.gdscript",
          regex: /<=|>=|==|<|>|!=/
        }
      ],
      "#arithmetic_op": [
        {
          token: "keyword.operator.arithmetic.gdscript",
          regex: /\+=|-=|\*=|\/=|%=|&=|\|=|\*|\/|%|\+|-|<<|>>|&|\||\^|~/
        }
      ],
      "#assignment_op": [
        {
          token: "keyword.operator.assignment.gdscript",
          regex: /=/
        }
      ],
      "#keywords": [
        {
          token: "keyword.language.gdscript",
          regex: /\b(?:if|elif|else|for|while|break|continue|pass|return|match|func|class|class_name|extends|is|onready|tool|static|export|setget|const|var|as|void|enum|preload|assert|yield|signal|breakpoint|rpc|sync|master|puppet|slave|remotesync|mastersync|puppetsync)\b/,
          caseInsensitive: true
        }
      ],
      "#letter": [
        {
          token: "constant.language.gdscript",
          regex: /\b(?:true|false|null)\b/,
          caseInsensitive: true
        }
      ],
      "#numbers": [
        {
          token: "constant.numeric.integer.hexadecimal.gdscript",
          regex: /\b0x[\da-fA-F]*\b/,
          caseInsensitive: true
        },
        {
          token: "constant.numeric.float.gdscript",
          regex: /\b\d+\.\d*(?:e[\-\+]?\d+)?\b/,
          caseInsensitive: true
        },
        {
          token: "constant.numeric.float.gdscript",
          regex: /\b\.\d+(?:e[\-\+]?\d+)?\b/,
          caseInsensitive: true
        },
        {
          token: "constant.numeric.float.gdscript",
          regex: /\b\d+e[\-\+]?\d+\b/,
          caseInsensitive: true
        },
        {
          token: "constant.numeric.integer.gdscript",
          regex: /\b\d+\b/
        }
      ],
      "#const_def": [
        {
          token: [
            "storage.type.const.gdscript",
            "text",
            "constant.language.gdscript"
          ],
          regex: /\b(const)(\s+)([a-zA-Z_][a-zA-Z_0-9]*)/,
          caseInsensitive: true
        }
      ],
      "#var_def": [
        {
          token: [
            "storage.type.var.gdscript",
            "text",
            "variable.language.gdscript"
          ],
          regex: /\b(var)(\s+)([a-zA-Z_][a-zA-Z_0-9]*)/,
          caseInsensitive: true
        }
      ],
      "#type_declear": [
        {
          token: ["text", "entity.name.type.class.gdscript"],
          regex: /(\:\s*)([a-zA-Z_][a-zA-Z_0-9]*)/
        }
      ],
      "#function-return-type": [
        {
          token: ["text", "entity.name.type.class.gdscript", "text"],
          regex: /(\)\s*\-\>\s*)([a-zA-Z_][a-zA-Z_0-9]*)(\s*\:)/
        }
      ],
      "#class_def": [
        {
          token: ["text", "entity.name.type.class.gdscript", "text"],
          regex: /(^class)(\s+)([a-zA-Z_]\w*)(\s*)(?=:)/
        }
      ],
      "#class_new": [
        {
          token: [
            "entity.name.type.class.gdscript",
            "text",
            "storage.type.new.gdscript",
            "text"
          ],
          regex: /\b([a-zA-Z_][a-zA-Z_0-9]*)(.)(new)(\()/
        }
      ],
      "#class_is": [
        {
          token: [
            "text",
            "storage.type.is.gdscript",
            "text",
            "entity.name.type.class.gdscript"
          ],
          regex: /(\s+)(is)(\s+)([a-zA-Z_][a-zA-Z_0-9]*)/
        }
      ],
      "#class_enum": [
        {
          token: [
            "entity.name.type.class.gdscript",
            "text",
            "constant.language.gdscript"
          ],
          regex: /\b([A-Z][a-zA-Z_0-9]*)(\.)([A-Z_0-9]+)/
        }
      ],
      "#class_name": [
        {
          token: [
            "text",
            "entity.name.type.class.gdscript",
            "class.other.gdscript"
          ],
          regex: /(class_name)(\s+)([a-zA-Z_][a-zA-Z_0-9]*)((?:\.[a-zA-Z_][a-zA-Z_0-9]*)?)/
        }
      ],
      "#extends": [
        {
          token: "entity.other.inherited-class.gdscript",
          regex: /(extends)\s+[a-zA-Z_][a-zA-Z_0-9]*(?:\.[a-zA-Z_][a-zA-Z_0-9]*)?/
        }
      ],
      "#builtin_func": [
        {
          token: "support.function.builtin.gdscript",
          regex: /(?:sin|cos|tan|sinh|cosh|tanh|asin|acos|atan|atan2|sqrt|fmod|fposmod|floor|ceil|round|abs|sign|pow|log|exp|is_nan|is_inf|ease|decimals|stepify|lerp|dectime|randomize|randi|randf|rand_range|seed|rand_seed|deg2rad|rad2deg|linear2db|db2linear|max|min|clamp|nearest_po2|weakref|funcref|convert|typeof|type_exists|char|str|print|printt|prints|printerr|printraw|var2str|str2var|var2bytes|bytes2var|range|load|inst2dict|dict2inst|hash|Color8|print_stack|instance_from_id|preload|yield|assert)\b(?=\([^)]*\))/
        }
      ],
      "#builtin_classes": [
        {
          token: "support.class.library.gdscript",
          regex: /(?:Vector2|Vector3|Color|Rect2|Array|Basis|Dictionary|Plane|Quat|RID|Rect3|Transform|Transform2D|AABB|String|Color|NodePath|RID|Object|Dictionary|Array|PoolByteArray|PoolIntArray|PoolRealArray|PoolStringArray|PoolVector2Array|PoolVector3Array|PoolColorArray)\b/
        }
      ],
      //   "#const_vars": [
      //     {
      //       token: "constant.language.gdscript",
      //       regex: /\b[A-Z_0-9]+\b/
      //     }
      //   ],
      "#function-declaration": [
        {
          token: [
            "meta.function.gdscript",
            "storage.type.function.static.gdscript",
            "meta.function.gdscript",
            "storage.type.function.gdscript",
            "meta.function.gdscript"
          ],
          regex: /(\s*)(?:\b(static)(\s+))?\b(func|signal)(\s+)(?=[[:alpha:]_][[:word:]]*\s*\()/,
          push: [
            {
              token: "punctuation.section.function.begin.gdscript",
              regex: /:|(?=[#'"$])/,
              next: "pop"
            },
            {
              include: "#function-def-name"
            },
            {
              include: "#parameters"
            },
            {
              include: "#line-continuation"
            },
            {
              include: "#return-annotation"
            },
            {
              defaultToken: "meta.function.gdscript"
            }
          ]
        }
      ],
      "#function-def-name": [
        {
          token: "entity.name.function.gdscript",
          regex: /\b[[:alpha:]_]\w*\b/
        }
      ],
      "#parameters": [
        {
          token: "punctuation.definition.parameters.begin.gdscript",
          regex: /\(/,
          push: [
            {
              token: "punctuation.definition.parameters.end.gdscript",
              regex: /\)/,
              next: "pop"
            },
            {
              token: "keyword.operator.unpacking.parameter.gdscript",
              regex: /\*\*|\*/
            },
            {
              include: "#parameter-special"
            },
            {
              token: [
                "variable.parameter.function.language.gdscript",
                "text",
                "punctuation.separator.parameters.gdscript"
              ],
              regex: /([[:alpha:]_]\w*)(\s*)(?:(,)|(?=[)#$=]))/
            },
            {
              include: "#comment"
            },
            {
              include: "#loose-default"
            },
            {
              include: "#annotated-parameter"
            },
            {
              defaultToken: "meta.function.parameters.gdscript"
            }
          ]
        }
      ],
      "#any-method": [
        {
          token: "support.function.any-method.gdscript",
          regex: /\b[A-Za-z_]\w*\b(?=\s*[(])/
        }
      ],
      //   "#any-property": [
      //     {
      //       token: "variable.other.property.gdscript",
      //       regex: /\b[A-Za-z_]\w*\b(?![(])/
      //     }
      //   ],
      "#parameter-special": [
        {
          token: [
            "variable.parameter.function.language.special.self.gdscript",
            "variable.parameter.function.language.special.cls.gdscript",
            "text",
            "punctuation.separator.parameters.gdscript"
          ],
          regex: /\b(?:(self)|(cls))\b(\s*)(?:(,)|(?=\)))/
        }
      ],
      "#loose-default": [
        {
          token: "keyword.operator.gdscript",
          regex: /=/,
          push: [
            {
              token: "punctuation.separator.parameters.gdscript",
              regex: /,|(?=\))/,
              next: "pop"
            },
            {
              include: "#base_expression"
            }
          ]
        }
      ],
      "#annotated-parameter": [
        {
          token: [
            "variable.parameter.function.language.gdscript",
            "text",
            "punctuation.separator.annotation.gdscript"
          ],
          regex: /\b([[:alpha:]_]\w*)(\s*)(:)/,
          push: [
            {
              token: "punctuation.separator.parameters.gdscript",
              regex: /,|(?=\))/,
              next: "pop"
            },
            {
              token: "keyword.operator.assignment.gdscript",
              regex: /=(?!=)/
            }
          ]
        }
      ],
      // "#line-continuation": [{
      //     token: [
      //         "punctuation.separator.continuation.line.gdscript",
      //         "text",
      //         "invalid.illegal.line.continuation.gdscript"
      //     ],
      //     regex: /(\\)(\s*)(\S.*$)/
      // }, {
      //     token: [
      //         "punctuation.separator.continuation.line.gdscript",
      //         "text"
      //     ],
      //     regex: /(\\)(\s*$)/,
      //     push: [{
      //         token: "text",
      //         regex: "(?=^\\s*$)|(?!\\s*[rR]?(?:\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\")|\\G$(?#'\\G'isnecessaryforST))",
      //         TODO: "FIXME: regexp doesn't have js equivalent",
      //         originalRegex: "(?x)\n  (?=^\\s*$)\n  |\n  (?! (\\s* [rR]? (\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))\n      |\n      (\\G $)  (?# '\\G' is necessary for ST)\n  )\n",
      //         next: "pop"
      //     }, {
      //         include: "#base_expression"
      //     }]
      // }],
      "#pascal_case_class": [
        {
          token: "entity.name.type.class.gdscript",
          regex: /\b[A-Z][a-zA-Z_0-9]*\b/
        }
      ]
    };

    this.normalizeRules();
  };

  GDScriptHighlightRules.metaData = {
    fileTypes: ["gd"],
    scopeName: "source.gdscript",
    name: "GDScript"
  };

  oop.inherits(GDScriptHighlightRules, TextHighlightRules);

  exports.GDScriptHighlightRules = GDScriptHighlightRules;
});
